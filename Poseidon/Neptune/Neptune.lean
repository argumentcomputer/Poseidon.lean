import Mathbin.Data.Fin.Basic
import Mathbin.Data.Matrix.Basic
import Mathbin.Data.Zmod.Algebra
import Poseidon.Util.Util

noncomputable section

open Util

namespace Neptune

variable (p t : ‚Ñï) [Fact p.Prime] [Field (Zmod p)] [Fintype (Fin‚Çì t)]

/- The AddRoundConstant linear step of a single round of the Poseidon permutation -/
def ARC (c a : Fin‚Çì t ‚Üí Zmod p) (i : Fin‚Çì t) : Zmod p := (a i) + (c i)

/- An `R_f`-round, that is, a full round. -/
def R_f_round (S_box' : Zmod p ‚Üí Zmod p) (c : Fin‚Çì t ‚Üí Zmod p)
  (MDS' : Matrix (Fin‚Çì t) (Fin‚Çì t) (Zmod p)) (a : Fin‚Çì t ‚Üí Zmod p) : Fin‚Çì t ‚Üí Zmod p :=
  Matrix.mulVec‚Çì MDS' (Œª i => S_box' (ARC p t c a i))

/- An `R_p`-round, that is, a partial round. -/
def R_p_round (S_box' : Zmod p ‚Üí Zmod p) (c : Fin‚Çì t ‚Üí Zmod p)
  (MDS' : Matrix (Fin‚Çì t) (Fin‚Çì t) (Zmod p)) (a : Fin‚Çì t ‚Üí Zmod p) : Fin‚Çì t ‚Üí Zmod p :=
  Matrix.mulVec‚Çì MDS'
    (Œª i => dite ((i : ‚Ñï) = 0) (Œª _ => S_box' (ARC p t c a i)) (Œª _ => ARC p t c a i))

def iterate {A : Sort u} (n : ‚Ñï) (f : A ‚Üí A) : A ‚Üí A :=
  match n with
    | .zero => id
    | .succ k => f ‚àò (iterate k f)

/- The Poseidon permutation function, takes as input `t` elements, and returns `t` elements;
  this is defined in terms of compositions of `R_f_round` and `R_p_round`. -/
def P_perm (R_f R_p : ‚Ñï) (S_box' : Zmod p ‚Üí Zmod p) (c a : Fin‚Çì t ‚Üí Zmod p)
  (MDS' : Matrix (Fin‚Çì t) (Fin‚Çì t) (Zmod p)) : Fin‚Çì t ‚Üí Zmod p :=
  (iterate R_f (R_f_round p t S_box' c MDS')) ((iterate R_p (R_p_round p t S_box' c MDS'))
  ((iterate R_f $ R_f_round p t S_box' c MDS') a))

/- Adding an `r`-chunk to the state. -/
def add_to_state (r : ‚Ñï) (m : Fin‚Çì r ‚Üí Zmod p) 
  (a : Fin‚Çì t ‚Üí Zmod p) : Fin‚Çì t ‚Üí Zmod p :=
  Œª i => dite ((i : ‚Ñï) < r) (Œª h => a i + m (Fin‚Çì.castLt i h)) (Œª _ => a i)

def fin_coercion (ho : o < r + cap) : Fin‚Çì o ‚Üí Fin‚Çì (r + cap) :=
  Œª (i : Fin‚Çì o) => 
    (‚ü®(i : ‚Ñï), lt_of_le_of_lt‚Çì (le_of_lt‚Çì i.prop) ho‚ü© : Fin‚Çì (r + cap))

lemma helper_1 (d r cap : ‚Ñï) (j : Fin‚Çì (d * r + (r + cap))) :
  ‚Üëj + r < d.succ * r + (r + cap) := by
    have h1 : d.succ * r + (r + cap) = d * r + (r + cap) + r := by
      rw [add_assoc]
      rw [add_comm _ r]
      rw [‚Üê add_assoc _ _ (r + cap)] 
      rw [‚Üê Nat.succ_mul]
    rw [h1]
    apply add_lt_add_of_lt_of_le j.prop le_rfl

def r_elements_of_zmodp (r d cap : ‚Ñï) 
                        (a : Fin‚Çì ((.succ d) * r + (r + cap)) ‚Üí Zmod p)
                        (hr : 1 ‚â§ r) : Fin‚Çì r ‚Üí Zmod p := 
  (Œª (j : Fin‚Çì r) => 
    a ‚ü®(.succ d) + j, 
        add_lt_add_of_le_of_lt ((le_mul_iff_one_le_right (Nat.succ_pos‚Çì _)).2 hr)
          (lt_add_of_lt_of_nonneg j.prop (Nat.zero_le‚Çì _))‚ü©) 

def helper_step (d r : ‚Ñï)
                (a : Fin‚Çì ((.succ d) * r + (r + cap)) ‚Üí Zmod p) 
                (j : Fin‚Çì (d * r + (r + cap))) : ¬¨j.val < (Nat.succ d) * r ‚Üí Zmod p := 
  Œª _ => a ‚ü®(j : ‚Ñï) + r, helper_1 d r cap j‚ü©

def simplifications (d r cap : ‚Ñï) (a : Fin‚Çì ((.succ d) * r + (r + cap)) ‚Üí Zmod p) 
                    (hr : 1 ‚â§ r) (j : Fin‚Çì (d * r + (r + cap))) : j.val < (Nat.succ d) * r ‚Üí Zmod p :=
  Œª h => 
    a (Fin‚Çì.castLt j (lt_trans‚Çì h
              ((lt_add_iff_pos_right _).2 (add_pos_of_pos_of_nonneg (Nat.pos_of_ne_zero‚Çì
                (Nat.one_le_iff_ne_zero.1 hr)) (Nat.zero_le‚Çì _)))))

def compose_MDS (R_f R_p r cap : ‚Ñï) (hr : 1 ‚â§ r) 
                (S_box : Zmod p ‚Üí Zmod p) (c : Fin‚Çì (r + cap) ‚Üí Zmod p) 
                (MDS : Matrix (Fin‚Çì (r + cap)) (Fin‚Çì (r + cap)) (Zmod p)) (k : ‚Ñï) 
                (a : Fin‚Çì (k * r + (r + cap)) ‚Üí Zmod p) : Fin‚Çì (r + cap) ‚Üí Zmod p :=
  by induction k with
    | zero => 
        rw [Nat.zero_mul] at a 
        rw [zero_add] at a;
        refine Œª i => P_perm p (r + cap) R_p R_f S_box c a MDS i
    | succ d hd => 
        refine (Œª i => P_perm p (r + cap) R_p R_f S_box c
                         (add_to_state p (r + cap) r (r_elements_of_zmodp p r d cap a hr) 
                            (hd (Œª j => dite ((j : ‚Ñï) < (.succ d) * r) 
                                          (simplifications p d r cap a hr j) 
                                          (helper_step p d r a j)
                                          )))
                             MDS 
                             i)

/- The Poseidon hash function, takes `N` bits and returns `o` `ùîΩ_p`-elements. -/
def P_hash (R_f R_p r o cap : ‚Ñï) (hr : 1 ‚â§ r) (S_box : Zmod p ‚Üí Zmod p) 
  (c : Fin‚Çì (r + cap) ‚Üí Zmod p)
  (MDS : Matrix (Fin‚Çì (r + cap)) (Fin‚Çì (r + cap)) (Zmod p)) (ho : o < r + cap)
  (k : ‚Ñï) (a : Fin‚Çì (k * r + (r + cap)) ‚Üí Zmod p) : Fin‚Çì o ‚Üí Zmod p :=
  @Function.comp (Fin‚Çì o) (Fin‚Çì (r + cap)) (Zmod p)
    (compose_MDS p R_f R_p r cap hr S_box c MDS k a)
    (fin_coercion ho)

end Neptune