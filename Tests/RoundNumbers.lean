import LSpec
import Poseidon.RoundNumbers
import Poseidon.Parameters.Lurk

/-!
# Round number generation tests

This module contains tests for the generation of round numbers in `Poseidon.RoundNumbers`
-/

open LSpec Poseidon

/- The following tests were generated by a modified `calc_round_numbers.py` script from the reference implementation -/
section ReferenceImplementation

-- test : (p, t, M, a, secParam, expectedRF, expectedRP)
def refTestCases : List (Nat × Nat × Nat × Int × Bool × Nat × Nat) := 
[(0x4d2f052bf9574ef0b209d1b8dec9904c6ee397dab9c795533845055ebda92207,3,128,5,true,8,56),
(0x49ea18562d4b77c9c972183f2e2083050d45643a21be87cc67c27ff43497b61f,6,128,5,true,8,57),
(0x24acc28965afb9aefe286980cfab3e324f363cec408b81eda207ceb1deedd6df,3,128,5,true,8,56),
(0x25dc17916be6c0ed1186a0c6a2ca296f22b7ff47fc2e3af1d9f6187fc9cec913,6,128,5,true,8,57),
(0xb74b0d0878bb72a9,24,128,3,true,8,42),
(0x878b6df488063baafaa80b2241f3048d1aaea53d39c1cd8c3e05e5943ebf1e72ebe16fa305a1ef9dcdfe76abb4d120ffdd9a70df960fc86e636b4a6e107980c6d16094236523514aae7237e5d2ba4dee8213c6d242aaea16762446f6fc8406c7,2,128,5,true,8,56),
(0xab9f9b08560d08536dc668aa38dcd2faf907d7e98e739c8a0bd58a9c93fbee2a46fa0dae3565644969ddc4cae88d0861,4,128,5,true,8,56),
(0xc53ebbba5b242b5d2581c5317ace1004109737e43d58f71afe037367c5faf6e9,6,128,5,true,8,57),
(0xb916b1ec8be650282ae41f0f9459d5cd579f8b00df85a1bf,8,128,5,true,8,57),
(0xdb25e593b578b0fc23a6645b,16,128,5,true,8,42),
(0xe0d45abe09206864816ed6f60b15ad3a7b85f721dea7248c157ddfe8f334cc6a3ab6ee6e0681099e10dc0f855e6d6395484f1d33cb2b2e6059fc795dfabb7084139b00f7bec1a82e4ded49d4836c2cd12ef87aecf6bf3fa2ba3e32e07361cc17,2,256,5,true,8,116),
(0x8e3820d24d44ba42922d3ab95a1fd150cfc0b1edb2cdedcccbbbbe03fda19f6bb77c0eb747bf4fa394d0f8634770dac1,4,256,5,true,8,116),
(0xecc64f7135a1692d17a62c3ae91cc8dedba4a84025dc37d5e5eccdfac468bac9,6,256,5,true,8,117),
(0xe39de0591bf37771a34944a12f85ceafa896cf820a070c57,8,256,5,true,8,86),
(0xd2210148451e071908127743,16,256,5,true,8,42),
(0xded423c1b41584db294389dddce91abcbb9bd9f045582e32331d7ce043d6746c082dab3e4e531f71f1ff68b37b87bc0885b60ecd53fb66db225de0386c234c4481306c2e052f9b5a226beeee7f826c60336e1c6399915598bf16d55e335c782f,2,128,5,false,6,52),
(0xb9f272519f297284460531cc8a0b6e4ffe91499d54cf1cf73db48ce532708e7dc85566bc919a96dc4b2b6bb5ddbb9b57,4,128,5,false,6,52),
(0xc84d4468b16d543fbb9e30ccc88a78989a6d0165cbf2ab980553b439a7ed3ff5,6,128,5,false,6,53),
(0xd47f840c2070aa9ac259b375678c652b7ce0d717a1acb815,8,128,5,false,6,53),
(0x82c2b0b5ea6dee696440a5c9,16,128,5,false,6,39),
(0xfafd1a761390c75f1e357c9e1493efb8b113644b6ec32180d104885915f723756c9c944a731aa7b7d358b4d630d3f2abe918e8c2d503cb40f071728430bf87077223ab4258ba5e61be2ccf70b7676c3c50aec3153af88bafba9e5383d3822729,2,256,5,false,6,107),
(0xb4bc383b57011405fd8656631006367ca11f9709e466ef0ad540210f5022aad164beae42af3f94b34e8b5e432173cf8d,4,256,5,false,6,107),
(0xe215a8f55872029552aade9d97ecab3b598254af0dadc9ed5141777d2b71080b,6,256,5,false,6,108),
(0xb7533b81a7f202ba0c3b3d97546728b9092f4af0ef33ac8b,8,256,5,false,6,80),
(0xeb928f905d9a4e44b5d4e481,16,256,5,false,6,39),
(0xfc4dc1f5915e74dbfd360420f47a80efbcc1a8f28400e80b3da38096cf99911d9211793fc410d5cef424c638affb987eb6467cde544b56394467bdf6d4d68037e12612f85c9fb5cc36bb88413b4e90e0bd00cd9c739f85497c2ab2e46cde3c93,2,128,3,true,8,83),
(0x8edebbcd2d9ec44e325b5c5e1e630c8d40907d7696b3310d361dd69ac7ccc9d29e9ad127fbed4260f5439878a0513951,4,128,3,true,8,84),
(0xe938960de5c21e6af1a4395d66aaa4fef8286a389841a54826542221363fa2ff,6,128,3,true,8,84),
(0x918a0afc9ea6a161c15edf43122e8c9a60f21b43c4275255,8,128,3,true,8,84),
(0xb4e22b35050893e2aeb9f753,16,128,3,true,8,64),
(0x9999fb99495cc83f4ec9d978ea55e39957c547e531a3104a6b5b9f7d26482570bbf46a9ae4dc0d93f3d2780975a8298635f6bb5b8c2a464add0409012c5ac110b97357b4f08763fb8ed8540f7af74d27163aae8688e767683504e1dcefd768a1,2,256,3,true,8,170),
(0x8974dab875e504a00cfe801f665ba93cf55f372678e34c0b736331ade26c2e3d28160be6f2c4c8b88b9ad68bcbb1d783,4,256,3,true,8,171),
(0x96c679e74f9f96211fed032c6849a1c7130e99eed25db8316e987fab187504cb,6,256,3,true,8,171),
(0xd66994d593a167638f5ba0a89c853bc6f91a83a982ce7485,8,256,3,true,8,128),
(0xc7f99bb7cefa6cbfa024c5ad,16,256,3,true,8,64),
(0x900257abfa24052283fcaea5413ee8908c852a0acfef917fe2ecf16ad11d5f10d0174341aa0f253912a7301bede6e234e0c9b317896397bf586e003f50f297d4b2b72406f2ad7c95d1d4e87d6ce70bc061c5c356d656bf2ff43b6fb9ac732729,2,128,3,false,6,77),
(0xb92c751cfd9d226222ed5e69e9590323d76078b3e11cebdf1aa468ba46f0b3e1100bf3dc7d34ff37f12e7cd0fc3e6f9d,4,128,3,false,6,78),
(0xfdcedff119bc841a4e86ac314fe6fbed46a7cc8f08e67a7387877caf3e266da7,6,128,3,false,6,78),
(0xfbecd696587b65c2e8b69dcd86bc8e322528343b8cddfbd3,8,128,3,false,6,78),
(0x9730b470a0a86eabee316bc5,16,128,3,false,6,59),
(0xc73d96d9c83495f3c7a1a818e89a70a986156326d1ee25afdf56f8c8f447c6692dded067fe756d588dea60d0477706b2f7072b3c9cc2f6553be4cbc2f5d94b5863049d16a9ca7f8ab66b71e83fee5e3d060bb9ce6c82d8c91519fd11d6b218e5,2,256,3,false,6,158),
(0xd25790caf7511fd068b38cea35e88e7b10eb5b0ab6a5ff21c7c3730dbdf5a7d181276a6cd8ac8082b3e9339993bedfc7,4,256,3,false,6,159),
(0xb6e74c5eb70a57d822734fefbea68c5a3bad1c0a4e41057faf284dd2687c40e3,6,256,3,false,6,159),
(0x8ec90605eadd836035a0e70f45310af0a47a3bca19b5b18f,8,256,3,false,6,119),
(0x8a323d328b574cb889c889b3,16,256,3,false,6,59),
(0x88fc5bbda96fdbf076ca7ef2176e772df6519012be3df3a60a3f9b22a557cbc3ba09ed271e0619b7fd5c6c2e609a192d92407bebee24d01a5ca4b8407db0c787aba7508112c5d78f265e3d0b6866dc7b380d36a66f2e8aa63a05e0e471d1b67d,2,128,-1,true,8,65),
(0x896f40e0a84f12c22711aeec406c3b16c4603f2717a3536f6cee6bb44e73f97aef05c0ea853454ee55262fd69cc1717d,4,128,-1,true,8,60),
(0xff4dd7e00688c2f246f7a9510f7118b3c2907b5bc4b3d53197784e7ad9523a9f,6,128,-1,true,8,57),
(0x9212c5a499fdeb79c1784daee779d077d7f613e9d246b59f,8,128,-1,true,8,54),
(0x9a5880fb0867ba5e6d630b51,16,128,-1,true,8,32),
(0xc3bfd0cfcebc7f0080a4c1f0edfdfa1ebbda19b3670f045db7291456c1d75bd1d3f920f867d2bf604c3b686f98a39a0df6cb1832b87c63b06063bf19736149fcb4e91133456089697e2be7be5e24ecbecf6b7b69a389edbd9ae5c1ec3a90332f,2,256,-1,true,8,134),
(0xab9e80e0b37e27210e2b0a93e8ae898b02a6d6a696be75bb3a7af88034fc61faf0b9d2570b8a4d6b02af28f8e050d327,4,256,-1,true,8,128),
(0xaa057040cacc6c728aa94f228b0a36d288fc2eb576bfa09d4b336cd0a77e3755,6,256,-1,true,8,126),
(0xa3e2f5a26dd120fcf0af31207226401b4a90d2688069b4d3,8,256,-1,true,8,89),
(0xc9be179dc7984f2ca9cec6c3,16,256,-1,true,8,32),
(0xec64ed597b5897686fc82c10516ebc553b33d39485ea8eaff241d469eb0451c8168d78a800fe2cd51c380826cf198c6e1f3aff5c15ac686a8440fdd4a85e8a084c463a8cabd1e30c9981a34cf65a42f5dabaa03bf974eed8338cf2d5fbd8a163,2,128,-1,false,6,60),
(0xbb4f8167055ef10035868607797a0da4ba013ad47740d5d54cb19cc65b77d0b8a048fe696cccc87d25a10b00cc4958cb,4,128,-1,false,6,55),
(0xeed62bfe83ed4ee9abc3b8da45085f61b4d181cf440e3b47fb3a07faa134b1fb,6,128,-1,false,6,53),
(0xf4484f72f2b26ab25ff97e1f17a118ec82d84ba8c59ed15d,8,128,-1,false,6,50),
(0x8b722b98b4128854b428970f,16,128,-1,false,6,29),
(0xa7188e6afe305938dd2170b16a2378f307d8f4af894332016f96c233fcf4b4a63884d34278ef18d7c84705f336459c157b2b53b79d15fc2bdad98650a662dd1ac8e3aee494fefe0646a5a53b94bc2d68f7377a71562647ad4d13f74e9c804d93,2,256,-1,false,6,124),
(0xbda8f68ee9bdb2c44a19b938dedabccaa863e2a8f0ac0cd0c9d7861c78280d98afb9f719ef67a94d9f930dea53e0973d,4,256,-1,false,6,119),
(0xe93d1534654b850427d30145c424d1f1f4a377b895f8b6148af58eeccd261593,6,256,-1,false,6,117),
(0xcb1c3770815e328d66ec5ff67438f5cbab9eb490b44114ff,8,256,-1,false,6,82),
(0xcc2765a2031117ec6bab2bcf,16,256,-1,false,6,29)]

def evalRefCases := refTestCases.map fun (p, t, M, a, sec, rFexpected, rPexpected) => 
  let (rFactual, rPactual) := findRoundNumbers p t M a sec
  (rFexpected, rPexpected) == (rFactual, rPactual) 

def refTest := test "Round numbers match reference implementation" $ evalRefCases.all (· == true)

end ReferenceImplementation

/- The tests in this section are taken from the round number generator in the Python implementation -/
section PythonImplementation

def pyCase.p := 0xfffffffffffffeff
def pyCase.t := 5
def pyCase.M := 128
def pyCase.a := 3
def pyCase.sec := true
def pyCase.expectedRF := 8
def pyCase.expectedRP := 41

open pyCase in
def pyTest := test "Round numbers match Python implementation" $ 
  (expectedRF, expectedRP) == findRoundNumbers p t M a sec

end PythonImplementation

/- The tests in this section are taken from the round number generator in the Filecoin/Rust implementation -/
section FilecoinImplementation
/-
NOTE : The following Filecoin tests are temporarily commented out of the test suite because of a
discrepancy in the Filecoin implementation that is causing inconsistencies with the reference
implementation.

<https://github.com/filecoin-project/neptune/issues/147>
-/

def rustP := 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
def rustM := 128
def rustA : Int := 5

def rustCases := [
            (2, 55),
            (3, 55),
            (4, 56),
            (5, 56),
            (6, 56),
            (7, 56),
            (8, 57),
            (9, 57),
            (10, 57),
            (11, 57),
            (12, 57),
            (13, 57),
            (14, 57),
            (15, 57),
            (16, 59),
            (17, 59),
            (25, 59),
            (37, 60),
            (65, 61)
]
def evalRustCases := rustCases.map fun (t, rPExpected) => 
  (findRoundNumbers rustP t rustM rustA true).2 == rPExpected

def rustTest := test "Round numbers match Filecoin implementation" $ evalRustCases.all (· == true)

end FilecoinImplementation

def main : IO UInt32 := do
  IO.println "-------------------------------"
  IO.println "Testing round number generation"
  IO.println "-------------------------------"
  lspecIO $ refTest ++ pyTest /- ++ rustTest -/